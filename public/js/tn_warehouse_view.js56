// Plik: js/tn_warehouse_view.js
// Wersja: 1.24 (Opcjonalne parametry etykiety magazynowej)

document.addEventListener('DOMContentLoaded', function () {

    // --- Inicjalizacja globalnego obiektu aplikacji ---
    if (typeof window.tnApp === 'undefined') window.tnApp = {};
    // Odczytaj ścieżkę do skryptu kodów kreskowych z konfiguracji globalnej (ustawionej w PHP)
    const barcodeScriptPath = window.tnAppConfig?.barcodeScriptPath || 'kod_kreskowy.php'; // Fallback

    // --- Funkcje Pomocnicze JS (Toast, Kopiowanie, Modal Regału Placeholder) ---
    if (typeof window.tnApp.copyToClipboard === 'undefined') { window.tnApp.copyToClipboard = (text) => { if (!navigator.clipboard) { tnApp.showToast('Twoja przeglądarka nie obsługuje kopiowania do schowka.', 'warning'); return; } navigator.clipboard.writeText(text).then(() => { tnApp.showToast(`Skopiowano ID: ${text}`); }).catch(err => { console.error('Błąd kopiowania do schowka: ', err); tnApp.showToast('Nie udało się skopiować ID.', 'error'); }); }; }
    if (typeof window.tnApp.showToast === 'undefined') { window.tnApp.showToast = (message, type = 'info', delay = 3500) => { const toastContainer = document.getElementById('toastContainer'); if (!toastContainer) { console.error("Brak kontenera tostów #toastContainer"); return; } const toastId = 'toast-' + Date.now(); const bgClass = type === 'success' ? 'bg-success' : type === 'error' ? 'bg-danger' : type === 'warning' ? 'bg-warning text-dark' : 'bg-primary'; const iconHtml = type === 'success' ? '<i class="bi bi-check-circle-fill me-2"></i>' : type === 'error' ? '<i class="bi bi-exclamation-triangle-fill me-2"></i>' : type === 'warning' ? '<i class="bi bi-exclamation-circle-fill me-2"></i>' : '<i class="bi bi-info-circle-fill me-2"></i>'; const toastHtml = `<div class="toast align-items-center text-white ${bgClass} border-0 fade" id="${toastId}" role="alert" aria-live="assertive" aria-atomic="true"><div class="d-flex"><div class="toast-body">${iconHtml} ${message}</div><button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button></div></div>`; toastContainer.insertAdjacentHTML('beforeend', toastHtml); const toastElement = document.getElementById(toastId); const toast = new bootstrap.Toast(toastElement, { delay: delay, autohide: true }); toast.show(); toastElement.addEventListener('hidden.bs.toast', () => toastElement.remove()); }; }
    if (typeof window.tnApp.openRegalModal === 'undefined') { window.tnApp.openRegalModal = (regalData = null) => { console.warn("Funkcja tnApp.openRegalModal jest tylko placeholderem."); alert(`Akcja dla regału: ${regalData ? 'Edycja ' + regalData.tn_id_regalu : 'Dodaj nowy'}`); }; }

    // --- Inicjalizacja Komponentów Bootstrap ---
    const warehouseGridContainer = document.getElementById('warehouseGridContainer');
    const tooltipTriggerList = [].slice.call(warehouseGridContainer?.querySelectorAll('[data-bs-toggle="tooltip"]') ?? []);
    const tooltipList = tooltipTriggerList.map(function (el) { return new bootstrap.Tooltip(el, { trigger: 'hover' }); });
    const popoverTriggerList = [].slice.call(warehouseGridContainer?.querySelectorAll('[data-bs-toggle="popover"]') ?? []);
    const popoverList = popoverTriggerList.map(function (el) { try { const d = JSON.parse(el.getAttribute('data-popover-content')); return new bootstrap.Popover(el, { html: true, trigger: 'click', placement: 'auto', title: d.title, content: d.content, customClass: 'tn-warehouse-popover', sanitize: false }); } catch (e) { console.error("Błąd popovera:", e, el.getAttribute('data-popover-content')); return null; } }).filter(p => p !== null);
    document.addEventListener('click', function (ev) { /* ... logika zamykania popoverów ... */ let ct = false; popoverTriggerList.forEach(t => { if (t && (t === ev.target || t.contains(ev.target))) ct = true; }); if (ct) { popoverList.forEach(p => { if (p && p.element !== ev.target && !p.element.contains(ev.target)) p.hide(); }); } else { let ci = ev.target.closest('.popover.show'); if (!ci) { popoverList.forEach(p => { if(p) p.hide(); }); } } }, true);

    // --- Logika Modala Kodu Kreskowego Lokalizacji ---
    const barcodeModalElement = document.getElementById('barcodeModal'); const barcodeModalImage = document.getElementById('barcodeModalImage'); const barcodeModalLocationIdSpan = document.getElementById('barcodeModalLocationId');
    if (barcodeModalElement && barcodeModalImage && barcodeModalLocationIdSpan && warehouseGridContainer) { warehouseGridContainer.addEventListener('click', function(event) { const barcodeTrigger = event.target.closest('.tn-slot-barcode'); if (barcodeTrigger) { event.stopPropagation(); const locationId = barcodeTrigger.dataset.locationId; const largeBarcodeSrc = barcodeTrigger.dataset.barcodeSrc; if (locationId && largeBarcodeSrc) { barcodeModalLocationIdSpan.textContent = locationId; barcodeModalImage.src = largeBarcodeSrc; barcodeModalImage.alt = `Powiększony kod kreskowy dla ${locationId}`; const modal = bootstrap.Modal.getOrCreateInstance(barcodeModalElement); modal.show();} else { console.warn("Brak danych dla modala kodu kreskowego:", barcodeTrigger.dataset);}} }); } else { console.warn('Elementy modala kodu kreskowego lokalizacji nie znalezione.'); }
    if (typeof window.tnApp.printBarcodeModal === 'undefined') { window.tnApp.printBarcodeModal = () => { const locationId = barcodeModalLocationIdSpan?.textContent; const barcodeImageSrc = barcodeModalImage?.src; if (!locationId || !barcodeImageSrc) { alert('Błąd: Nie można odczytać danych do druku kodu kreskowego lokalizacji.'); return; } const printWindow = window.open('', '_blank', 'height=400,width=600'); if (!printWindow) { alert('Nie można otworzyć okna drukowania. Sprawdź, czy przeglądarka nie blokuje wyskakujących okienek.'); return; } printWindow.document.write(`<!DOCTYPE html><html lang="pl"><head><meta charset="UTF-8"><title>Drukuj Kod Lokalizacji: ${locationId}</title><style>body { text-align: center; margin-top: 30px; font-family: sans-serif; } img { max-width: 90%; height: auto; max-height: 150px; object-fit: contain; } h4 { margin-bottom: 20px; } @media print { body { margin-top: 10px; } @page { margin: 1cm; } }</style></head><body><h4>Lokalizacja Magazynowa:</h4><h2>${locationId}</h2><img src="${barcodeImageSrc}" alt="Kod kreskowy ${locationId}"><script>window.onload = function() { window.print(); window.onafterprint = function(){ window.close(); }; setTimeout(function(){ if(!window.closed) window.close(); }, 5000); };</script></body></html>`); printWindow.document.close(); printWindow.focus(); }; }

    // --- Logika Filtrowania Widoku ---
    const filterRegalSelect = document.getElementById('tn_filter_regal'); const filterStatusSelect = document.getElementById('tn_filter_status'); const filterTextInput = document.getElementById('tn_filter_text'); const clearFiltersBtn = document.getElementById('tn_clear_filters_btn'); const noResultsMessage = document.getElementById('noFilterResultsMessage');
    const filterWarehouseView = () => { if (!warehouseGridContainer || !noResultsMessage) { console.error("Brak #warehouseGridContainer lub #noFilterResultsMessage do filtrowania."); return; } const allLocationSlots = warehouseGridContainer.querySelectorAll('.tn-location-slot'); const allRegalCards = warehouseGridContainer.querySelectorAll('.tn-regal-card'); const selectedRegal = filterRegalSelect?.value ?? 'all'; const selectedStatus = filterStatusSelect?.value ?? 'all'; const filterText = filterTextInput?.value.toLowerCase().trim() ?? ''; let visibleSlotsCount = 0; allLocationSlots.forEach(slot => { const slotRegalId = slot.dataset.regalId; const slotStatus = slot.dataset.status; const slotFilterTextData = slot.dataset.filterText?.toLowerCase() || ''; const regalMatch = selectedRegal === 'all' || slotRegalId === selectedRegal; const statusMatch = selectedStatus === 'all' || slotStatus === selectedStatus; const textMatch = filterText === '' || slotFilterTextData.includes(filterText); if (regalMatch && statusMatch && textMatch) { slot.style.display = ''; slot.style.opacity = '1'; slot.style.pointerEvents = 'auto'; visibleSlotsCount++; } else { slot.style.display = 'none'; slot.style.opacity = '0'; slot.style.pointerEvents = 'none'; } }); allRegalCards.forEach(card => { const cardRegalId = card.dataset.regalId; const regalFilterMatch = selectedRegal === 'all' || cardRegalId === selectedRegal; const hasVisibleSlotsInside = card.querySelector('.tn-location-slot:not([style*="display: none"])') !== null; if (regalFilterMatch && hasVisibleSlotsInside) { card.style.display = ''; card.style.opacity = '1'; } else { card.style.display = 'none'; card.style.opacity = '0'; } }); noResultsMessage.classList.toggle('d-none', visibleSlotsCount > 0); };
    filterRegalSelect?.addEventListener('change', filterWarehouseView); filterStatusSelect?.addEventListener('change', filterWarehouseView); filterTextInput?.addEventListener('input', filterWarehouseView); clearFiltersBtn?.addEventListener('click', () => { if(filterRegalSelect) filterRegalSelect.value = 'all'; if(filterStatusSelect) filterStatusSelect.value = 'all'; if(filterTextInput) filterTextInput.value = ''; filterWarehouseView(); }); filterWarehouseView();

    // --- Kontrola Gęstości Widoku ---
    const densityButtons = document.querySelectorAll('input[name="density"]'); const savedDensity = localStorage.getItem('warehouseDensity') || 'normal';
    const setDensity = (densityValue) => { if (!warehouseGridContainer) return; warehouseGridContainer.className = warehouseGridContainer.className.replace(/warehouse-density-\w+/g, ''); warehouseGridContainer.classList.add(`warehouse-density-${densityValue}`); localStorage.setItem('warehouseDensity', densityValue); const radioBtn = document.getElementById(`density${densityValue.charAt(0).toUpperCase() + densityValue.slice(1)}`); if(radioBtn) radioBtn.checked = true; document.querySelectorAll('label[for^="density"]').forEach(lbl => lbl.classList.remove('active')); document.querySelector(`label[for="density${densityValue.charAt(0).toUpperCase() + densityValue.slice(1)}"]`)?.classList.add('active'); tooltipList.forEach(tooltip => tooltip.hide()); };
    densityButtons.forEach(button => { if (button.value === savedDensity) { button.checked = true; document.querySelector(`label[for="${button.id}"]`)?.classList.add('active'); } else { document.querySelector(`label[for="${button.id}"]`)?.classList.remove('active'); } button.addEventListener('change', (event) => setDensity(event.target.value)); }); setDensity(savedDensity);

    // --- Podświetlanie Powiązanych Produktów ---
    warehouseGridContainer?.addEventListener('mouseover', (event) => { const targetSlot = event.target.closest('.tn-location-slot.status-occupied'); if (!targetSlot || targetSlot.style.display === 'none' || !targetSlot.dataset.productId) return; const productId = targetSlot.dataset.productId; const relatedSlots = warehouseGridContainer.querySelectorAll(`.tn-location-slot.status-occupied[data-product-id="${productId}"]:not([style*="display: none"])`); relatedSlots.forEach(slot => { if (slot !== targetSlot) slot.classList.add('tn-slot-related-highlight'); }); });
    warehouseGridContainer?.addEventListener('mouseout', (event) => { const targetSlot = event.target.closest('.tn-location-slot.status-occupied'); if (targetSlot && targetSlot.dataset.productId) { const productId = targetSlot.dataset.productId; const relatedTargetSlot = event.relatedTarget?.closest(`.tn-location-slot.status-occupied[data-product-id="${productId}"]`); if(!relatedTargetSlot) { const highlightedSlots = warehouseGridContainer.querySelectorAll('.tn-slot-related-highlight'); highlightedSlots.forEach(slot => slot.classList.remove('tn-slot-related-highlight')); } } else { const highlightedSlots = warehouseGridContainer.querySelectorAll('.tn-slot-related-highlight'); highlightedSlots.forEach(slot => slot.classList.remove('tn-slot-related-highlight')); } });

    // --- Efekt Hover dla Slotów ---
    let lastHoveredSlot = null; warehouseGridContainer?.addEventListener('mouseover', function(event) { const currentSlot = event.target.closest('.tn-location-slot'); if (currentSlot && currentSlot !== lastHoveredSlot && currentSlot.style.display !== 'none') { if (lastHoveredSlot) { lastHoveredSlot.style.transform = 'scale(1)'; lastHoveredSlot.style.zIndex = lastHoveredSlot.getAttribute('data-default-zindex') || '1'; } const currentZIndex = window.getComputedStyle(currentSlot).zIndex; const defaultZIndex = (currentZIndex === 'auto' || currentZIndex === '0') ? '1' : currentZIndex; currentSlot.setAttribute('data-default-zindex', defaultZIndex); currentSlot.style.zIndex = '10'; currentSlot.style.transform = `scale(1.05)`; lastHoveredSlot = currentSlot; } }); warehouseGridContainer?.addEventListener('mouseout', function(event) { const currentSlot = event.target.closest('.tn-location-slot'); if (lastHoveredSlot && (!event.relatedTarget || !event.relatedTarget.closest('.tn-location-slot'))) { lastHoveredSlot.style.transform = 'scale(1)'; lastHoveredSlot.style.zIndex = lastHoveredSlot.getAttribute('data-default-zindex') || '1'; lastHoveredSlot = null; } });


    // --- Logika Drukowania Etykiety Magazynowej ---
    if (typeof window.tnApp.printProductLabel === 'undefined') {
        window.tnApp.printProductLabel = (buttonElement) => {
            const slotElement = buttonElement.closest('.tn-location-slot');
            if (!slotElement) {
                console.error('Nie znaleziono elementu slotu dla przycisku drukowania etykiety.');
                tnApp.showToast('Błąd: Nie znaleziono slotu.', 'error');
                return;
            }

            // Pobierz dane z atrybutów data-*, ale nie sprawdzaj ich istnienia tutaj
            const locationId = slotElement.dataset.locationId || 'Brak ID'; // ID lokalizacji jest kluczowe
            const arrivalDateRaw = slotElement.dataset.arrivalDate;
            const productWeight = slotElement.dataset.productWeight;
            const productInternalCatalogNr = slotElement.dataset.productInternalNr; // Numer do kodu kreskowego
            const productName = slotElement.dataset.productName;

            // === USUNIĘTO BLOK WALIDACJI WYMAGANYCH DANYCH ===
            // if (!locationId || !arrivalDateRaw || !productWeight || !productInternalCatalogNr) {
            //      console.error('Brakujące dane dla etykiety magazynowej:', slotElement.dataset);
            //      tnApp.showToast('Błąd: Brak pełnych danych dla etykiety (ID lok., Data przyj., Waga, Nr kat.).', 'error');
            //      return;
            // }
            // ===============================================

            // Formatowanie daty przyjęcia (jeśli istnieje)
            let formattedArrivalDate = 'Brak'; // Domyślna wartość
            try {
                if (arrivalDateRaw && arrivalDateRaw.match(/^\d{4}-\d{2}-\d{2}$/)) {
                    const parts = arrivalDateRaw.split('-');
                    formattedArrivalDate = `${parts[2]}.${parts[1]}.${parts[0]}`;
                } else if (arrivalDateRaw) { // Pokaż, jeśli jest w innym formacie
                     formattedArrivalDate = arrivalDateRaw;
                }
            } catch (e) {
                console.warn("Błąd formatowania daty przyjęcia:", arrivalDateRaw, e);
                formattedArrivalDate = arrivalDateRaw || 'Błąd';
            }

            // Przygotuj dane dla kodu kreskowego (jeśli numer katalogowy istnieje)
            const barcodeData = productInternalCatalogNr || ''; // Pusty string, jeśli brak numeru
            const barcodeSrc = barcodeData
                ? `${barcodeScriptPath}?s=code128&d=${encodeURIComponent(barcodeData)}&h=80&tf=0&ts=0`
                : ''; // Pusty URL, jeśli brak danych do kodu

            // --- Definicja HTML i CSS dla Etykiety Magazynowej ---
            const labelContentHTML = `
                <!DOCTYPE html>
                <html lang="pl">
                <head>
                    <meta charset="UTF-8">
                    <title>Etykieta Magazynowa - ${locationId}</title>
                    <style>
                        @page { size: 100mm 70mm; margin: 4mm; }
                        body { font-family: Arial, Helvetica, sans-serif; font-size: 10pt; line-height: 1.3; margin: 0; padding: 2mm; width: calc(100% - 4mm); height: calc(100% - 4mm); box-sizing: border-box; display: flex; flex-direction: column; justify-content: space-between; background: #fff; overflow: hidden; }
                        .label-header, .label-content, .label-footer { width: 100%; flex-shrink: 0; }
                        .label-header { text-align: center; border-bottom: 1px solid #ccc; padding-bottom: 1mm; margin-bottom: 3mm; }
                        .location-id { font-size: 16pt; font-weight: bold; font-family: 'Courier New', Courier, monospace; }
                        .label-content { display: grid; grid-template-columns: repeat(2, 1fr); gap: 2mm 5mm; margin-bottom: 3mm; }
                        .data-field {}
                        .field-label { font-size: 8pt; color: #555; display: block; margin-bottom: 0; }
                        .field-value { font-size: 11pt; font-weight: bold; display: block; }
                        .product-name { grid-column: 1 / -1; font-size: 9pt; text-align: center; color: #333; border-top: 1px dotted #eee; padding-top: 1mm; margin-top: 1mm; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
                        .label-footer { text-align: center; margin-top: auto; min-height: 30mm; /* Zapewnij miejsce na kod */ display: flex; flex-direction: column; justify-content: center; }
                        .barcode-image { display: block; width: 98%; max-height: 25mm; object-fit: contain; margin: 0 auto; background-color: #fff; /* Tło dla pewności */ }
                        .barcode-value { font-size: 9pt; margin-top: 0.5mm; font-family: 'Courier New', Courier, monospace; }
                        .no-barcode { font-style: italic; color: #888; font-size: 9pt; } /* Styl dla braku kodu */
                        @media print { body { border: none; -webkit-print-color-adjust: exact; print-color-adjust: exact; } @page { margin: 3mm; } }
                    </style>
                </head>
                <body>
                    <div class="label-header">
                        <span class="field-label">JEDNOSTKA MAGAZYNOWA</span>
                        <span class="location-id">${locationId}</span>
                    </div>
                    <div class="label-content">
                        <div class="data-field">
                            <span class="field-label">DATA PRZYJĘCIA</span>
                            <span class="field-value">${formattedArrivalDate}</span>
                        </div>
                         <div class="data-field">
                            <span class="field-label">WAGA</span>
                            <span class="field-value">${productWeight || 'Brak'}</span>
                        </div>
                         <div class="data-field product-name" title="${productName || ''}">
                            ${productName || ''}
                         </div>
                    </div>
                    <div class="label-footer">
                         ${barcodeSrc ? `<img src="${barcodeSrc}" alt="Kod kreskowy ${barcodeData}" class="barcode-image">` : '<span class="no-barcode">(Brak danych do kodu)</span>'}
                         ${barcodeData ? `<div class="barcode-value">${barcodeData}</div>` : ''}
                    </div>
                </body>
                </html>
            `;

            // --- Otwieranie Okna i Drukowanie ---
            const printWindow = window.open('', '_blank', 'width=500,height=400,resizable=yes,scrollbars=yes');
            if (!printWindow) { tnApp.showToast('Nie można otworzyć okna drukowania etykiety. Sprawdź blokadę popupów.', 'error'); return; }
            printWindow.document.open(); printWindow.document.write(labelContentHTML); printWindow.document.close();
            setTimeout(() => { try { printWindow.focus(); printWindow.print(); } catch (e) { console.error("Błąd drukowania etykiety:", e); tnApp.showToast('Błąd drukowania.', 'error'); if (!printWindow.closed) { printWindow.close(); } } }, 700);
        };
    }
    // Delegacja zdarzeń dla przycisku drukowania
    warehouseGridContainer?.addEventListener('click', function(event) { const printButton = event.target.closest('.tn-action-print-label'); if (printButton) { event.preventDefault(); event.stopPropagation(); const slotElement = printButton.closest('.tn-location-slot'); if (slotElement && slotElement.dataset.status === 'occupied') { tnApp.printProductLabel(printButton); } } });

    // --- Obsługa Potwierdzenia Usuwania Regału ---
    warehouseGridContainer?.addEventListener('click', function(event) { const deleteButton = event.target.closest('.tn-action-delete-regal'); if (deleteButton) { event.preventDefault(); const regalId = deleteButton.dataset.regalId; const deleteUrl = deleteButton.getAttribute('href'); if (!regalId || !deleteUrl) { console.error('Brak danych dla usuwania regału:', deleteButton); tnApp.showToast('Błąd konfiguracji przycisku.', 'error'); return; } const confirmationMessage = `UWAGA!\nUsunięcie regału spowoduje usunięcie WSZYSTKICH lokalizacji w nim zawartych oraz potencjalnie odpięcie produktów!\n\nCzy na pewno chcesz usunąć regał '${regalId}'?`; if (window.confirm(confirmationMessage)) { window.location.href = deleteUrl; } } });

    // --- Logika Modali (Assign, Generate) ---
    const assignModalElement = document.getElementById('assignWarehouseModal'); const assignProductSelect = document.getElementById('tn_assign_product_id'); const assignQuantityInput = document.getElementById('tn_assign_quantity'); const assignQuantityHelp = document.getElementById('assignQuantityHelp'); const assignProductForm = document.getElementById('assignProductForm'); const validateAssignQuantity = () => { if (!assignQuantityInput || !assignProductSelect) return true; const quantity = parseInt(assignQuantityInput.value); const selectedOption = assignProductSelect.options[assignProductSelect.selectedIndex]; const maxStock = selectedOption ? parseInt(selectedOption.dataset.stock) : null; let isValid = true; if (isNaN(quantity) || quantity < 1) { assignQuantityInput.classList.add('is-invalid'); assignQuantityInput.nextElementSibling.textContent = 'Ilość musi być liczbą większą od 0.'; isValid = false; } else if (maxStock !== null && quantity > maxStock) { assignQuantityInput.classList.add('is-invalid'); assignQuantityInput.nextElementSibling.textContent = `Ilość nie może przekroczyć stanu magazynowego (${maxStock} szt.).`; isValid = false; } else { assignQuantityInput.classList.remove('is-invalid'); } return isValid; }; assignProductSelect?.addEventListener('change', function() { const selectedOption = this.options[this.selectedIndex]; const maxStock = selectedOption.dataset.stock; if (maxStock !== undefined && assignQuantityInput) { assignQuantityInput.max = maxStock; assignQuantityInput.placeholder = `Max: ${maxStock}`; if (assignQuantityHelp) { assignQuantityHelp.textContent = `Dostępne w magazynie: ${maxStock} szt.`; } assignQuantityInput.classList.remove('is-invalid'); validateAssignQuantity(); } else if (assignQuantityHelp) { assignQuantityHelp.textContent = ''; } }); assignQuantityInput?.addEventListener('input', validateAssignQuantity); assignProductForm?.addEventListener('submit', function(event) { let isFormValid = true; if (!assignProductSelect || assignProductSelect.value === "") { assignProductSelect.classList.add('is-invalid'); isFormValid = false; } else { assignProductSelect.classList.remove('is-invalid'); } if (!validateAssignQuantity()) { isFormValid = false; } if (!isFormValid) { event.preventDefault(); event.stopPropagation(); tnApp.showToast('Popraw błędy w formularzu przypisania.', 'warning'); } }); assignModalElement?.addEventListener('hidden.bs.modal', function () { assignProductForm?.reset(); assignProductSelect?.classList.remove('is-invalid'); assignQuantityInput?.classList.remove('is-invalid'); if (assignQuantityHelp) assignQuantityHelp.textContent = ''; });
    const generateLocationsForm = document.getElementById('generateLocationsForm'); const levelStartInput = document.getElementById('tn_generate_level_start'); const levelEndInput = document.getElementById('tn_generate_level_end'); const slotStartInput = document.getElementById('tn_generate_slot_start'); const slotEndInput = document.getElementById('tn_generate_slot_end'); const validateRange = (startInput, endInput) => { if (!startInput || !endInput) return true; const start = parseInt(startInput.value); const end = parseInt(endInput.value); let isValid = true; if (isNaN(start) || start < 1) { startInput.classList.add('is-invalid'); isValid = false; } else { startInput.classList.remove('is-invalid'); } if (isNaN(end) || end < 1) { endInput.classList.add('is-invalid'); isValid = false; } else { endInput.classList.remove('is-invalid'); } if (isValid && end < start) { endInput.classList.add('is-invalid'); isValid = false; tnApp.showToast('Wartość "Do" nie może być mniejsza niż "Od".', 'warning'); } return isValid; }; generateLocationsForm?.addEventListener('submit', function(event) { let isFormValid = true; const regalSelect = document.getElementById('tn_generate_regal_id'); if(!regalSelect || regalSelect.value === "") { regalSelect.classList.add('is-invalid'); isFormValid = false; } else { regalSelect.classList.remove('is-invalid'); } if (!validateRange(levelStartInput, levelEndInput)) isFormValid = false; if (!validateRange(slotStartInput, slotEndInput)) isFormValid = false; if (!isFormValid) { event.preventDefault(); event.stopPropagation(); tnApp.showToast('Popraw błędy w formularzu generowania.', 'warning'); } }); const generateModalElement = document.getElementById('generateLocationsModal'); generateModalElement?.addEventListener('hidden.bs.modal', function () { generateLocationsForm?.reset(); const invalidInputs = generateLocationsForm?.querySelectorAll('.is-invalid'); invalidInputs?.forEach(input => input.classList.remove('is-invalid')); });

}); // Koniec DOMContentLoaded
